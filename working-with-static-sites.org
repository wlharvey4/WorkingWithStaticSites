# -*- mode: org; fill-column: 79; -*-

#+TITLE: Working With Static Sites
#+SUBTITLE: Bringing the Power of Simplicity to Modern Sites
#+AUTHOR: Raymond Camden
#+SUBAUTHOR: Brian Rinaldo
#+DATE: February 28, 2017
#+MACRO: VERSION 0.0.7
#+MACRO: EDITION 0.1

#+texinfo: @insertcopying

* Preface
  :PROPERTIES:
  :unnumbered: t
  :END:
  Because of the *benefits* static site generators offer, static sites
  generators are used to run thousands of sites and are becoming the basis for
  a broad *set of tools* that reach the casual developer and the nontechnical
  content writer.

  It can be difficult to know which tools to choose and how to get started.

  *That is the problem the authors hope to address in writing this book.*  By
   providing *common scenarios* and insights on how to address them, the
   authors hope to make it easier for anyone to create static sites solutions
   and take advantage of the speed, flexibilty, and security they offer.

** What You Need to Know

*** Who this book is for
    - This book is for web developers who are looking for a simpler way to
      build and deploy websites.
    - For developers with experience with dynamic app servers (like PHP,
      Node.js, and ColdFusion), this book will present a simpler alternative.
    - For developers who are still working with simple websites but need a way
      to make them more powerful.
*** What's not covered
    - This book focuses on static site generators that work from the command
      line.
    - Desktop tools that have similar features are not covered.
*** How this book is organized
    - Begins by describing why you would want to use static sites.
    - Subsequent chapters focus on a specific type of site and uses this as a
      way of introducing different static site generators.
    - How to build a site
    - More advanced topics, such as adding dynamic elements back in,
    - Working with CMS
    - How to deploy and host a site
    - How to migrate from a dynamic site to a static one
** Conventions
   - /Italic/ :: Indicates new terms, URLs, email addresses, filenames, and
                 file extensions
   - ~Constant Width~ :: Used for program listings, as well as within
        paragraphs to refer to program elements such as variables or function
        names, databases, data types, environment variables, statements, and
        keywords
   - {{{command(Command)}}} :: Shows commands or other text that should be
        typed literally by the user
   - {{{samp(Sample)}}} :: Shows text that should be replaced with
        user-supplied values or by values determined by context.
** Code Examples
   Supplemental material (code examples, exercises, etc.) is available for
   download at [[https://github.com/cfjedimaster/Static-Sites-Book]]
* Why Static Sites
  Why would static sites be a worthwhile option for today's web?  This chapter
  will explore some of the benefits of static sites before diving into how the
  changing technology behind static sites (i.e., static site generators---the
  topic of this book) are making them viable again.

** Benefits of Static Sites
   Of the many reasons that static sites are coming back into fashion, two
   stand out:

   1. Static sites are /fast/
   2. Statis sites are /secure/

** Static Sites are /Fast/
   #+cindex: performance, website
   #+cindex: website performance
   #+cindex: abandon, webiste loading
   Website performance is critical.  Users tend to abandon sites that take
   longer than three seconds to load (with a load time of under two seconds
   being considered optimal for mobile).  Achieving this level of website
   performance can be difficult.

   #+cindex: bottlenecks, webiste loading
   #+cindex: server-side rendering, bottleneck
   #+cindex: cache, website
   #+cindex: Content Delivery Network (CDN)
   #+cindex: CDN
   #+cindex: dynamic rendering, bottleneck
   #+cindex: points of failure, website loading
   By their very nature, static sites load extremely fast.  This is because
   every visitor is served the exact same HTML without the bottlenecks caused
   by a server-side language, database, or any kind of dynamic rendering.
   Plus, static sites are extremely easy to cache and serve via a content
   delivery network (CDN), making  them even faster for the end user.  In
   addition, once you eliminate dynamic rendering from a database, you've
   eliminated numerous points of failure that often cause sites to be
   unresponsive or completely fail.

** Static Sites are /Secure/
   #+cindex: vulnerabilities, websites
   #+cindex: website vulnerabilities
   With a static site, there is no database to breach and no server-side
   platform or CMS with unpatched vulnerabilities.  Static sites will not
   eliminate every vulnerability, but they narrow the window of opportunities
   available to any hacker and limit the amount of potential damage if a hacker
   does gain access.

** Other Benefits
   There are other benefits of static sites as well, including:

   #+cindex: flexible, benefit
   #+cindex: benefits, flexible
   - Flexibility ::
                    You are not working within a CMS framework, so there are no
                    limitations on how you can buidl your site.
     #+cindex: hosting, benefit
     #+cindex: benefits, hosting
   - Hosting ::
                Because there's no need for a database or server-side language
                support, hosting a static site can be anywhere from inexpensive
                to completely free, depending on your needs.
     #+cindex: versioning, benefit
     #+cindex: benefits, versioning
   - Versioning ::
                   Since a static site is made up of static files, it is
                   extremely easy to track and coordinate changes using version
                   control systems like Git and GitHub.


   #+cindex: static sites, what works
   With all of these benefits, why wouldn't you choose to use a static site?
   Well, only certain kinds of sites can realisticly work as static only.

** What Kind of Sites Can Go Static
   #+cindex: static sites, drawbacks
   #+cindex: drawbacks, static sites
   There are drawbacks to using static sites.

     #+cindex: dynamic data, drawback
     #+cindex: drawbacks, dynamic data
   - While some amount of dynamic data is possible on a static site that uses
     external API calls or third-party services, a static site is simply not
     suitable if you require large amounts of dynamic data or content
     personalization.
     #+cindex: learning curve, steep, drawback
     #+cindex: drawbacks, steep learning curve
   - From a development and content contribution standpoint, static site
     generators (i.e., the tools frequently used to build static sites) can
     have a steep learning curve.
     #+cindex: deployment, drawback
     #+cindex: drawbacks, complex deployment
   - Deployment can be complex, making static sites less than ideal for content
     that changes frequently.


   #+cindex: static sites,what works
   #+cindex: content focused, static sites
   #+cindex: user interaction, low, static sites
   Sites that tend to work best as static sites are content-focused,
   infrequently updated (once or twice a day at most), and do not require a
   high degree of user interaction or personalization.

   Here are some examples of types of sites that work well as static sites:

   #+cindex: blog, static site
   #+cindex: Disqus, service
   #+cindex: services, third party, Disqus
   - Blogs ::
              This is the most common use case; many static site generators
              default to a blog template.  Blogs are content-focused by design
              and, in many cases, user interaction is limited to comments,
              where services like [[https://disqus.com/][Disqus]] con fill the requirement.

* Building a Basic Static Site

** Welcome to Harp

** Your First Harp Project

** Working With Layouts and Partials

** Working With Data

** Generating a Site

** Building Camden Grounds

** Going Further With Harp

* Building a Blog

** Blogging With Jekyll

** Your First Jekyll Project

** Writing a Post

** A Quick Introduction to Liquid

** Working With Layouts and Includes

** Adding Additional Files

** Working With Data

** Configuring Your Jekyll Site

** Generating a Site

** Building a Blog

** Going Further with Jekyll

* Building a Documentation Site

** Characteristics of a Documentation Site

** Choosing a Generator for Your Documentation Site

** Our Sample Documentation Site

** Creating the Site

*** Installing Hugo

*** Generating the Initial Site Files

*** Configuring the Hugo Site

*** Adding Content

*** Creating the Layout

** Going Further

* Adding Dynamic Elements

** Handling Forms

*** Wufoo Forms

*** Google Docs Forms

*** Formspree

*** Adding a Comment Form to Camden Grounds

** Adding Comments

*** Working with Disqus

*** Adding Comments to The Cat Blog

** Adding Search

*** Creating a Custom Search Engine

*** Adding a Custom Search Engine to a Real Site

** Even More Options

* Adding a CMS

** CloudCannon

*** Creating a Site on CloudCannon

*** Editing a Site on CloudCannon

*** Where to Go from Here

** Netlify CMS

*** Setting Up the Netlify CMS

*** Where to Go from Here

** Jekyll Admin

*** Setting Up Jekyll Admin

*** Editing a Site in Jekyll Admin

*** Where to Go from Here

** More Options

*** Forestry.io

*** Lektor

*** Headless CMS

* Deployment

** Plain Old Web Servers

** Cloud File Storage Providers

*** Hosting a Site on Amazon S3

*** Hosting a Site on Google Cloud Storage

** Deploying with Surge

** Deploying with Netlify

** Summary

* Mirgrating to a Static Site

** Migrating from WordPress to Jekyll

** Other Migration Options

*** Hugo

*** Middleman

*** Hexo

*** Harp

*** Many More Options Are Available

** Go Forth and Be Static

* Copying
  :PROPERTIES:
  :Copying:  t
  :END:
  Based upon /{{{title}}}/ by {{{author}}} & {{{subauthor}}} (O'Reilly).
  \copy 2017 {{{author}}}, 978-1-491-96094-3.

  This document was:

  Produced: {{{time(%F %R)}}}
  Version: {{{VERSION}}}
  Edition: {{{EDITION}}}
* Index
  :PROPERTIES:
  :Index:    t
  :END:
* Export Settings                                                  :noexport:
#+TEXINFO_PRINTED_TITLE: Outline of @i{Working With Static Sites}
#+TEXINFO_CLASS: info
#+TEXINFO_DIR_CATEGORY:WebDev
#+TEXINFO_DIR_TITLE:working-with-static-sites
#+TEXINFO_DIR_DESC:Outline of Working With Static Sites by R Campden & B Rinaldo
#+MACRO: subauthor Brian Rinaldo
#+MACRO: command @@texinfo:@command{*@@$1@@texinfo:*}@@
#+MACRO: samp @@texinfo:@samp{@@<$1>@@texinfo:}@@
