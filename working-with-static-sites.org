# -*- mode: org; fill-column: 79; -*-

#+TITLE: Working With Static Sites
#+SUBTITLE: Bringing the Power of Simplicity to Modern Sites
#+AUTHOR: Raymond Camden
#+SUBAUTHOR: Brian Rinaldo
#+DATE: February 28, 2017
#+MACRO: VERSION 0.1.3
#+MACRO: EDITION 0.1
#+TEXINFO: @insertcopying

* Preface
  :PROPERTIES:
  :unnumbered: t
  :END:
  Because of the *benefits* static site generators offer, static sites
  generators are used to run thousands of sites and are becoming the basis for
  a broad *set of tools* that reach the casual developer and the nontechnical
  content writer.

  It can be difficult to know which tools to choose and how to get started.

  *That is the problem the authors hope to address in writing this book.*  By
   providing *common scenarios* and insights on how to address them, the
   authors hope to make it easier for anyone to create static sites solutions
   and take advantage of the speed, flexibilty, and security they offer.

** What You Need to Know

*** Who this book is for
    - This book is for web developers who are looking for a simpler way to
      build and deploy websites.
    - For developers with experience with dynamic app servers (like PHP,
      Node.js, and ColdFusion), this book will present a simpler alternative.
    - For developers who are still working with simple websites but need a way
      to make them more powerful.
*** What's not covered
    - This book focuses on static site generators that work from the command
      line.
    - Desktop tools that have similar features are not covered.
*** How this book is organized
    - Begins by describing why you would want to use static sites.
    - Subsequent chapters focus on a specific type of site and uses this as a
      way of introducing different static site generators.
    - How to build a site
    - More advanced topics, such as adding dynamic elements back in,
    - Working with CMS
    - How to deploy and host a site
    - How to migrate from a dynamic site to a static one
** Conventions
   - /Italic/ :: Indicates new terms, URLs, email addresses, filenames, and
                 file extensions
   - ~Constant Width~ :: Used for program listings, as well as within
        paragraphs to refer to program elements such as variables or function
        names, databases, data types, environment variables, statements, and
        keywords
   - {{{command(Command)}}} :: Shows commands or other text that should be
        typed literally by the user
   - {{{samp(Sample)}}} :: Shows text that should be replaced with
        user-supplied values or by values determined by context.
** Code Examples
   Supplemental material (code examples, exercises, etc.) is available for
   download at [[https://github.com/cfjedimaster/Static-Sites-Book]]
* Why Static Sites
  Why would static sites be a worthwhile option for today's web?  This chapter
  will explore some of the benefits of static sites before diving into how the
  changing technology behind static sites (i.e., static site generators---the
  topic of this book) are making them viable again.

** Benefits of Static Sites
   Of the many reasons that static sites are coming back into fashion, two
   stand out:

   1. Static sites are /fast/
   2. Statis sites are /secure/

** Static Sites are /Fast/
   #+cindex: performance, website
   #+cindex: website performance
   #+cindex: abandon, webiste loading
   Website performance is critical.  Users tend to abandon sites that take
   longer than three seconds to load (with a load time of under two seconds
   being considered optimal for mobile).  Achieving this level of website
   performance can be difficult.

   #+cindex: bottlenecks, webiste loading
   #+cindex: server-side rendering, bottleneck
   #+cindex: cache, website
   #+cindex: Content Delivery Network (CDN)
   #+cindex: CDN
   #+cindex: dynamic rendering, bottleneck
   #+cindex: points of failure, website loading
   By their very nature, static sites load extremely fast.  This is because
   every visitor is served the exact same HTML without the bottlenecks caused
   by a server-side language, database, or any kind of dynamic rendering.
   Plus, static sites are extremely easy to cache and serve via a content
   delivery network (CDN), making  them even faster for the end user.  In
   addition, once you eliminate dynamic rendering from a database, you've
   eliminated numerous points of failure that often cause sites to be
   unresponsive or completely fail.

** Static Sites are /Secure/
   #+cindex: vulnerabilities, websites
   #+cindex: website vulnerabilities
   With a static site, there is no database to breach and no server-side
   platform or CMS with unpatched vulnerabilities.  Static sites will not
   eliminate every vulnerability, but they narrow the window of opportunities
   available to any hacker and limit the amount of potential damage if a hacker
   does gain access.

** Other Benefits
   There are other benefits of static sites as well, including:

   #+cindex: flexible, benefit
   #+cindex: benefits, flexible
   - Flexibility ::
                    You are not working within a CMS framework, so there are no
                    limitations on how you can buidl your site.
     #+cindex: hosting, benefit
     #+cindex: benefits, hosting
   - Hosting ::
                Because there's no need for a database or server-side language
                support, hosting a static site can be anywhere from inexpensive
                to completely free, depending on your needs.
     #+cindex: versioning, benefit
     #+cindex: benefits, versioning
   - Versioning ::
                   Since a static site is made up of static files, it is
                   extremely easy to track and coordinate changes using version
                   control systems like Git and GitHub.


   #+cindex: static sites, what works
   With all of these benefits, why wouldn't you choose to use a static site?
   Well, only certain kinds of sites can realisticly work as static only.

** What Kind of Sites Can Go Static
   #+cindex: static sites, drawbacks
   #+cindex: drawbacks, static sites
   There are drawbacks to using static sites.

     #+cindex: dynamic data, drawback
     #+cindex: drawbacks, dynamic data
   - While some amount of dynamic data is possible on a static site that uses
     external API calls or third-party services, a static site is simply not
     suitable if you require large amounts of dynamic data or content
     personalization.
     #+cindex: learning curve, steep, drawback
     #+cindex: drawbacks, steep learning curve
   - From a development and content contribution standpoint, static site
     generators (i.e., the tools frequently used to build static sites) can
     have a steep learning curve.
     #+cindex: deployment, drawback
     #+cindex: drawbacks, complex deployment
   - Deployment can be complex, making static sites less than ideal for content
     that changes frequently.


   #+cindex: static sites,what works
   #+cindex: content focused, static sites
   #+cindex: user interaction, low, static sites
   Sites that tend to work best as static sites are content-focused,
   infrequently updated (once or twice a day at most), and do not require a
   high degree of user interaction or personalization.

   Here are some examples of types of sites that work well as static sites:

   #+cindex: blog, static site
   #+cindex: Disqus, service
   #+cindex: services, third party, Disqus
   - Blogs ::
              This is the most common use case; many static site generators
              default to a blog template.  Blogs are content-focused by design
              and, in many cases, user interaction is limited to comments,
              where services like [[https://disqus.com/][Disqus]] con fill the requirement.

** What Are Static Sites
   #+cindex: static site generators
   #+cindex: function, static site generator
   #+cindex: markup language
   #+cindex: static site generators, list of
   #+cindex: static site generators, data, metadata
   #+cindex: data, SSG's
   #+cindex: metadata, SSG's
   Static site generators solve the pain of building and maintaining a static
   site.  The fundamentals of a static site generator are extremely simple:
   they take in dynamic content and layout and output static HTML, CSS, and
   JavaScript files.  There are literally hundreds of static site generators
   <<static-site-generators>>([[https://staticsitegenerators.net/]]) but
   essentially they all do exactly the same thing and, for the most part,
   function similarly.

   - lightweight markup language (~Markdown .md~)
   - a templating language (~Handlebars {{}}~)
   - data/metadata (~Yaml .yml~)
   - CSS preprocessor (~Sass .scss~)
   - a compile-to-JavaScript language (~CoffeScript .coffee~)
   - \dArr
   - S S G \rArr ~.html .css .js~


   #+cindex: static site generators, in common
   {{{heading(What SSG's Have In Common)}}}
   - Templating language ::
        Use one or more, such as Liquid, Handlebars, Jade.  This is a key part
        of any static site generator, as it allows one to build a layout/theme
        for a site and plug in dynamic content during a build.
   - Markup language ::
        Use one or more ([[http://bit.ly/2lrz8JP]]) such as Markdown, AsciiDoc,
        reStructuredText.  Using a lightweight markup language makes it quicker
        and easier to write content using any text editor.
   - Command line ::
        Are run via the command line.
   - Local development server ::
        This allows you to develop and test locally befdore building and
        deploying your changes.  Typically, the tool watches the folder where
        the site files are being edited and recompiles the site on-the-fly as
        you edit them.
   - Extensible ::
        In most cases, if your static site generator doesn't support a feature
                   or language that you need, it has a build-in plugin
                   architecture that allows you to add that in (provided you
                   can code in the language the tool is built upon).
   - Support file-based data formats ::
        e.g. YAML, TOML, JSON.  File-based data allows you to structure any
        type of data independent of its display.


   #+cindex: static site generators, report
   #+begin_cartouche
   @@texinfo:@sansserif{@@The author has published a report called
   @@texinfo:@cite{@@Static Site Generators: Modern Tools for Static Web
   Development (O'Reilly 2015)@@texinfo:}@@.  The report focuses on the history
   of static sites, how they differ from dynamic sites built using content
   management systems or blog engines, and gives some details about the
   available static site generators.@@texinfo:}@@

   @@texinfo:@sansserif{@@The report is free and can be downloaded from
   O'Reilly here: [[http://oreil.ly/2l4fL8j]].@@texinfo:}@@
   #+end_cartouche

*** How to Choose a Static Site Generator
    #+cindex: static site generator, using
    So now with a basic understanding of what a static site generator is, how
    can one use them?  The first issue to resolve is trying to figure out which
    one to use.  This isn't an easy decision, since there are in excess of 445
    different available options.  ([[static-site-generators][List of SSG's]]). Even after filtering out
    projects that haven't been updated recently, there are still hundreds of
    potential tools.

    {{{subheading(How To Choose the Right SSG?)}}}
    #+cindex: static site generator, choosing
    #+attr_texinfo: :indic @i
   - The relative ``health'' of the project ::
        How recently has it been updated, and how big and active is the
        community?
   - How good is the documentation ::
        Many of the hundreds of static site generators (probably a majority)
        are not well documented.  This can cause you to spend far more time
        than necessary building your site and lead to needless frustration.
        Review the documentation carefully before committing to a project and
        don't assume that being able to read the source is sufficient.
   - Does it support my requirements ::
        This can involve very specific requirements (an importer or specific
        plugin) or a more general ability to meet amy needs (is it even
        extenible?).
   - Is the language it is built upon important to me ::
        For most, a static site generator will work well out of the box.  But
        in some cases it might be necessary to customize your generator via
        plugins or even contributions to the source code.  In these cases,
        knowing the underlying language can be important.


*** Going Forward
    The next chapters will look at some of the more mature and popular options
    for developing static sites, such as:
    - Jekyll (Ruby)
    - Hugo (Go)
    - Harp (JavaScript)


    Not only does each have a different underlying language, which may be an
    important consideration, but each also has its own pros and cons.  The
    chapters will look at building some common use cases:
    - a basic informational site
    - a blog
    - documentation site


    {{{noindent}}}using these tools in ways that take advantage of their
    relative merits.

    {{{heading(Dynamic Features)}}}
    Once the basics of the static site have been built, there needs to be added
    some dynamic features, like comments on a blog post, or a site search.  Or,
    if we have to support content contributors that aren't comfortable writing
    posts in Markdown via a text editor, we might want to add a CMS-like
    backend to the site to allow for easy editing.  The following will take a
    look at multiple solutions that solve each of these problems.

    {{{heading(Deployment)}}}
    After the site is complete, it's time to deploy it.  While this can be as
    easy as simply FTPing files onto a server, in most cases you'll want to
    automate the process or take advantage of services that can manage the
    build process for you.  The following chapters will explore a variety of
    tools and services that can ease the deployment process.

    {{{heading(Migration)}}}
    Finally, you may be evaluating static sites as an option to replace an
    existing site that uses a tool like WorkPress or some other CMS.  For these
    cases, the chapters will dive into tools that ease the process of migrating
    to a static site generator from a CMS by bringing over existing content.

    {{{heading(SSG Ecosystem)}}}
    In the end, this book hopes to provide you with a broad overview of the
    existing statit site generator ecosystem, while diving into the actual
    implementation details of how to accomplish your goals with these tools.

* Building a Basic Static Site

  #+cindex: brochure-ware
  #+cindex: simple site
  #+cindex: basic static site
  #+cindex: static site, basic
  The first site will be incredibly simple: /brochure-ware/.  There are times
  when a website will be nothing more than one or two pages of content.  While
  your product is in development, you may simply need a single-page ``Coming
  Soon'' site.

  Other examples of simple sites include the following:

  - A restaurent site providing hours, address, and a menu
    #+cindex: mobile app, landing page
    #+cindex: landing page, mobile app
  - A landing page for your mobile app that provides links to the various app
    stores
    #+cindex: portfolio page
    #+cindex: resume page
  - A portfolio page that functions as a resume for someone looking for a job


  In all of these examples, the entire site might consist of nothing more than
  one or two unique pages.  A static site generator might be overkill for such
  a thing, but small projects have a way of growing---not the other way
  around.  The benefits that static site generators provide will become /more/
  useful over time as the site grows with new content.

  {{{heading(First Example Site)}}}
  #+cindex: first site
  #+cindex: Camden Grounds
  The first example site will be an online presence for a coffee shop called
  Camden Grounds.  For Camden Grounds, the site will consist of:

    #+cindex: home page, simple site
  - A home page which is mostly pretty images
  - A menu showing a list of various coffees, teas, cookies, and more
  - A list of locations because Camden Grounds is actually a chain
  - An ``About Us'' page talking about the history of the company.


  That is a total of four pages and a static site generator may be a bit much
  for this, but it will be ``future proof'' for when it expands.

  #+cindex: Harp
  #+cindex: static site generator, Harp
  This site will make use of the static site generator Harp.

** Welcome to Harp
   #+cindex: Harp

   [[http://harpjs.com][Harp]] is a lightweight static site generator.  It is rather simple and, at
   times, limited but can be easy to pick up for people new to static sites.
   Harp requires minimal setup and focues more on convention than
   configuration.  As long as you follow a few simple rules in terms of
   organization, Harp will ``just work.''

*** Install Harp
#+cindex: Harp, install
#+cindex: npm
#+cindex: Node Package Manager
#+cindex: Node.js
{{{command(npm)}}}(Node Package Manager) must be installed on your system.
The easiest way is to install [[https://nodejs.org/en/][NodeJS]].

Once you have Node installed and {{{command(npm)}}} is working, install
Harp:
#+cindex: install harp
: npm install -g harp

{{{noindent}}}To confirm Harp installed correctly, run {{{command(harp)}}}
in your terminal.  You should get a usage message.

#+caption:Install Harp
#+name:com:install-harp
#+begin_src sh :results output :exports both
mkdir Harp
cd Harp
yarn init -yp
yarn add harp
#+end_src

#+RESULTS: com:install-harp
#+begin_example
yarn init v1.17.3
success Saved package.json
Done in 0.05s.
yarn add v1.17.3
info No lockfile found.
[1/4] Resolving packages...
[2/4] Fetching packages...
[3/4] Linking dependencies...
[4/4] Building fresh packages...
success Saved lockfile.
success Saved 460 new dependencies.
info Direct dependencies
└─ harp@0.30.1
info All dependencies
├─ @types/babel-types@7.0.7
├─ @types/babylon@6.16.5
├─ acorn-globals@3.1.0
├─ acorn-node@1.8.2
├─ acorn-walk@7.0.0
├─ acorn@3.3.0
├─ ajv@6.10.2
├─ align-text@0.1.4
├─ ansi-styles@3.2.1
├─ aproba@1.2.0
├─ are-we-there-yet@1.1.5
├─ argparse@1.0.10
├─ arr-flatten@1.1.0
├─ array-find-index@1.0.2
├─ asap@2.0.6
├─ asn1.js@4.10.1
├─ asn1@0.2.4
├─ assert@1.5.0
├─ assign-symbols@1.0.0
├─ async-each@1.0.3
├─ async-foreach@0.1.3
├─ asynckit@0.4.0
├─ atob@2.1.2
├─ autoprefixer@7.1.6
├─ aws-sign2@0.7.0
├─ aws4@1.8.0
├─ babel-runtime@6.26.0
├─ babel-types@6.26.0
├─ babylon@6.18.0
├─ balanced-match@1.0.0
├─ base@0.11.2
├─ base64-js@1.3.1
├─ basic-auth@2.0.1
├─ bcrypt-pbkdf@1.0.2
├─ binary-extensions@1.13.1
├─ bl@1.2.2
├─ block-stream@0.0.9
├─ brace-expansion@1.1.11
├─ braces@2.3.2
├─ browser-pack@6.1.0
├─ browser-resolve@1.11.3
├─ browserify-aes@1.2.0
├─ browserify-cipher@1.0.1
├─ browserify-des@1.0.2
├─ browserify-sign@4.0.4
├─ browserify-zlib@0.2.0
├─ browserify@16.5.0
├─ browserslist@2.11.3
├─ buffer-alloc-unsafe@1.1.0
├─ buffer-alloc@1.2.0
├─ buffer-crc32@0.2.13
├─ buffer-fill@1.0.0
├─ buffer-from@1.1.1
├─ buffer-xor@1.0.3
├─ buffer@5.4.2
├─ builtin-status-codes@3.0.0
├─ cache-base@1.0.1
├─ cached-path-relative@1.0.2
├─ camelcase-keys@2.1.0
├─ caniuse-lite@1.0.30000989
├─ caseless@0.12.0
├─ caw@2.0.1
├─ center-align@0.1.3
├─ chalk@2.4.2
├─ change-case@2.3.1
├─ character-parser@1.2.2
├─ chokidar@2.1.8
├─ chownr@1.1.2
├─ class-utils@0.3.6
├─ classifier@0.1.0
├─ clean-css@3.4.28
├─ cli@0.11.3
├─ cliui@2.1.0
├─ clone@2.1.2
├─ co@4.6.0
├─ code-point-at@1.1.0
├─ coffee-script@1.12.7
├─ collection-visit@1.0.0
├─ color-convert@1.9.3
├─ color-name@1.1.3
├─ combine-source-map@0.8.0
├─ combined-stream@1.0.8
├─ commander@2.8.1
├─ concat-map@0.0.1
├─ concat-stream@1.6.2
├─ config-chain@1.1.12
├─ connect@3.7.0
├─ console-browserify@1.1.0
├─ console-control-strings@1.1.0
├─ constant-case@1.1.2
├─ constantinople@3.1.2
├─ constants-browserify@1.0.0
├─ content-disposition@0.5.3
├─ convert-source-map@1.1.3
├─ copy-descriptor@0.1.1
├─ core-js@2.6.9
├─ core-util-is@1.0.2
├─ create-ecdh@4.0.3
├─ create-hmac@1.1.7
├─ cross-spawn@3.0.1
├─ crypto-browserify@3.12.0
├─ css-parse@1.7.0
├─ currently-unhandled@0.4.1
├─ dash-ast@1.0.0
├─ dashdash@1.14.1
├─ date-now@0.1.4
├─ debug@2.6.9
├─ decamelize@1.2.0
├─ decode-uri-component@0.2.0
├─ decompress-response@3.3.0
├─ decompress-tar@4.1.1
├─ decompress-tarbz2@4.1.1
├─ decompress-targz@4.1.1
├─ decompress-unzip@4.0.1
├─ decompress@4.2.0
├─ deep-extend@0.6.0
├─ delayed-stream@1.0.0
├─ delegates@1.0.0
├─ deps-sort@2.0.0
├─ des.js@1.0.0
├─ destroy@1.0.4
├─ detect-libc@1.0.3
├─ detective@5.2.0
├─ diffie-hellman@5.0.3
├─ domain-browser@1.2.0
├─ dot-case@1.1.2
├─ double-ended-queue@2.1.0-0
├─ download-github-repo@0.1.4
├─ download@6.2.5
├─ duplexer2@0.1.4
├─ duplexer3@0.1.4
├─ ecc-jsbn@0.1.2
├─ ee-first@1.1.1
├─ ejs@2.5.7
├─ electron-to-chromium@1.3.252
├─ end-of-stream@1.4.1
├─ envy-json@0.2.1
├─ errno@0.1.7
├─ error-ex@1.3.2
├─ esprima@4.0.1
├─ esutils@2.0.3
├─ etag@1.8.1
├─ events@2.1.0
├─ exit@0.1.2
├─ expand-brackets@2.1.4
├─ ext-list@2.2.2
├─ ext-name@5.0.0
├─ extend@3.0.2
├─ extglob@2.0.4
├─ extsprintf@1.3.0
├─ fast-deep-equal@2.0.1
├─ fast-json-stable-stringify@2.0.0
├─ fd-slicer@1.1.0
├─ filename-reserved-regex@2.0.0
├─ filenamify@2.1.0
├─ fill-range@4.0.0
├─ finalhandler@1.1.2
├─ find-up@1.1.2
├─ for-in@1.0.2
├─ forever-agent@0.6.1
├─ form-data@2.3.3
├─ fresh@0.5.2
├─ fs-constants@1.0.0
├─ fs-extra@1.0.0
├─ fs-minipass@1.2.6
├─ fsevents@1.2.9
├─ fstream@1.0.12
├─ function-bind@1.1.1
├─ gather-stream@1.0.0
├─ gauge@2.7.4
├─ gaze@1.1.3
├─ get-assigned-identifiers@1.2.0
├─ get-caller-file@1.0.3
├─ get-proxy@2.1.0
├─ get-value@2.0.6
├─ getpass@0.1.7
├─ glob-parent@3.1.0
├─ glob@7.1.4
├─ globule@1.2.1
├─ got@7.1.0
├─ har-schema@2.0.0
├─ har-validator@5.1.3
├─ harp-minify@0.4.0
├─ harp@0.30.1
├─ has-ansi@2.0.0
├─ has-flag@3.0.0
├─ has-symbol-support-x@1.4.2
├─ has-to-string-tag-x@1.4.1
├─ has-unicode@2.0.1
├─ has-value@1.0.0
├─ has-values@1.0.0
├─ has@1.0.3
├─ hash.js@1.1.7
├─ hmac-drbg@1.0.1
├─ hosted-git-info@2.8.4
├─ html-minifier@1.1.1
├─ htmlescape@1.1.1
├─ http-errors@1.7.3
├─ http-signature@1.2.0
├─ https-browserify@1.0.0
├─ iconv-lite@0.4.24
├─ ieee754@1.1.13
├─ ignore-walk@3.0.1
├─ image-size@0.5.5
├─ in-publish@2.0.0
├─ indent-string@2.1.0
├─ ini@1.3.5
├─ inline-source-map@0.6.2
├─ insert-module-globals@7.2.0
├─ invert-kv@1.0.0
├─ is-accessor-descriptor@1.0.0
├─ is-arrayish@0.2.1
├─ is-binary-path@1.0.1
├─ is-data-descriptor@1.0.0
├─ is-descriptor@1.0.2
├─ is-extglob@2.1.1
├─ is-finite@1.0.2
├─ is-fullwidth-code-point@1.0.0
├─ is-glob@4.0.1
├─ is-lower-case@1.1.3
├─ is-natural-number@4.0.1
├─ is-object@1.0.1
├─ is-plain-obj@1.1.0
├─ is-plain-object@2.0.4
├─ is-promise@2.1.0
├─ is-retry-allowed@1.1.0
├─ is-typedarray@1.0.0
├─ is-upper-case@1.1.2
├─ is-utf8@0.2.1
├─ is-windows@1.0.2
├─ isarray@1.0.0
├─ isexe@2.0.0
├─ isstream@0.1.2
├─ jjade@1.11.1
├─ js-base64@2.5.1
├─ js-yaml@3.13.1
├─ json-schema-traverse@0.4.1
├─ json-schema@0.2.3
├─ json-stable-stringify@0.0.1
├─ json-stringify-safe@5.0.1
├─ jsonfile@2.4.0
├─ jsonify@0.0.0
├─ jsonparse@1.3.1
├─ jsprim@1.4.1
├─ jstransformer-markdown@1.2.1
├─ jstransformer@1.0.0
├─ kind-of@3.2.2
├─ klaw@1.3.1
├─ labeled-stream-splicer@2.0.2
├─ language-classifier@0.0.1
├─ lazy-cache@1.0.4
├─ lcid@1.0.0
├─ less@3.8.1
├─ load-json-file@1.1.0
├─ lodash.assign@4.2.0
├─ lodash.clonedeep@4.5.0
├─ lodash.memoize@3.0.4
├─ lodash.mergewith@4.6.2
├─ lodash@4.17.15
├─ longest@1.0.1
├─ loud-rejection@1.6.0
├─ lower-case-first@1.0.2
├─ lowercase-keys@1.0.1
├─ lru-cache@4.1.1
├─ map-obj@1.0.1
├─ map-visit@1.0.0
├─ markdown@0.5.0
├─ marked@0.7.0
├─ meow@3.7.0
├─ micromatch@3.1.10
├─ miller-rabin@4.0.1
├─ mime-db@1.40.0
├─ mime-types@2.1.24
├─ mime@1.6.0
├─ mimic-response@1.0.1
├─ minimalistic-crypto-utils@1.0.1
├─ minimatch@3.0.4
├─ minimist@1.2.0
├─ minizlib@1.2.1
├─ mixin-deep@1.3.2
├─ module-deps@6.2.1
├─ ms@2.1.2
├─ nan@2.14.0
├─ nanomatch@1.2.13
├─ needle@2.4.0
├─ node-gyp@3.8.0
├─ node-pre-gyp@0.12.0
├─ node-sass@4.9.3
├─ nopt@3.0.6
├─ normalize-package-data@2.5.0
├─ normalize-path@2.1.1
├─ normalize-range@0.1.2
├─ npm-bundled@1.0.6
├─ npm-conf@1.1.3
├─ npm-packlist@1.4.4
├─ npmlog@4.1.2
├─ num2fraction@1.2.2
├─ oauth-sign@0.9.0
├─ object-assign@4.1.1
├─ object-copy@0.1.0
├─ once@1.4.0
├─ os-browserify@0.3.0
├─ os-homedir@1.0.2
├─ os-locale@1.4.0
├─ os-tmpdir@1.0.2
├─ osenv@0.1.5
├─ outpipe@1.1.1
├─ p-cancelable@0.3.0
├─ p-event@1.3.0
├─ p-finally@1.0.0
├─ pako@1.0.10
├─ param-case@1.1.2
├─ parents@1.0.1
├─ parse-json@2.2.0
├─ pascal-case@1.1.2
├─ pascalcase@0.1.1
├─ path-browserify@0.0.1
├─ path-case@1.1.2
├─ path-dirname@1.0.2
├─ path-exists@2.1.0
├─ path-parse@1.0.6
├─ path-platform@0.11.15
├─ path-type@1.1.0
├─ pause@0.1.0
├─ pend@1.2.0
├─ performance-now@2.1.0
├─ pinkie@2.0.4
├─ posix-character-classes@0.1.1
├─ postcss-value-parser@3.3.1
├─ postcss@6.0.14
├─ prepend-http@1.0.4
├─ process-nextick-args@2.0.1
├─ promise@7.3.1
├─ proto-list@1.2.4
├─ prr@1.0.1
├─ psl@1.3.1
├─ public-encrypt@4.0.3
├─ punycode@1.4.1
├─ qs@6.5.2
├─ querystring-es3@0.2.1
├─ querystring@0.2.0
├─ randomfill@1.0.4
├─ range-parser@1.2.1
├─ rc@1.2.8
├─ read-file-stdin@0.2.0
├─ read-only-stream@2.0.0
├─ read-pkg@1.1.0
├─ readable-stream@2.3.6
├─ readdirp@2.2.1
├─ redent@1.0.0
├─ redis-commands@1.5.0
├─ redis-parser@2.6.0
├─ redis@2.8.0
├─ regenerator-runtime@0.11.1
├─ relateurl@0.2.7
├─ remove-trailing-separator@1.1.0
├─ repeat-element@1.1.3
├─ repeat-string@1.6.1
├─ repeating@2.0.1
├─ request@2.88.0
├─ require-directory@2.1.1
├─ require-main-filename@1.0.1
├─ resolve-url@0.2.1
├─ resolve@1.12.0
├─ ret@0.1.15
├─ right-align@0.1.3
├─ safer-buffer@2.1.2
├─ sass-graph@2.2.4
├─ sax@0.5.8
├─ scss-tokenizer@0.2.3
├─ seek-bzip@1.0.5
├─ semver@5.7.1
├─ send@0.17.1
├─ set-blocking@2.0.0
├─ set-value@2.0.1
├─ setprototypeof@1.1.1
├─ shell-quote@1.7.2
├─ simple-concat@1.0.0
├─ snapdragon-node@2.1.1
├─ snapdragon-util@3.0.1
├─ sort-keys-length@1.0.1
├─ sort-keys@1.1.2
├─ source-map-resolve@0.5.2
├─ source-map-url@0.4.0
├─ source-map@0.5.7
├─ spdx-correct@3.1.0
├─ spdx-exceptions@2.2.0
├─ split-string@3.1.0
├─ sprintf-js@1.0.3
├─ sqwish@0.2.2
├─ sshpk@1.16.1
├─ static-extend@0.1.2
├─ statuses@1.5.0
├─ stdout-stream@1.4.1
├─ stream-browserify@2.0.2
├─ stream-combiner2@1.1.1
├─ stream-http@3.1.0
├─ stream-splicer@2.0.1
├─ strip-bom@2.0.0
├─ strip-dirs@2.1.0
├─ strip-indent@1.0.1
├─ strip-json-comments@2.0.1
├─ strip-outer@1.0.1
├─ stylus@0.54.5
├─ supports-color@5.5.0
├─ swap-case@1.1.2
├─ syntax-error@1.4.0
├─ tar-stream@1.6.2
├─ tar@2.2.2
├─ terraform@1.8.1
├─ through@2.3.8
├─ timed-out@4.0.1
├─ timers-browserify@1.4.2
├─ title-case@1.1.2
├─ to-buffer@1.1.1
├─ to-fast-properties@1.0.3
├─ to-object-path@0.3.0
├─ to-regex-range@2.1.1
├─ toidentifier@1.0.0
├─ tough-cookie@2.4.3
├─ trim-newlines@1.0.0
├─ trim-repeated@1.0.0
├─ true-case-path@1.0.3
├─ tty-browserify@0.0.1
├─ tweetnacl@0.14.5
├─ typedarray@0.0.6
├─ uglify-js@2.6.1
├─ umd@3.0.3
├─ unbzip2-stream@1.3.3
├─ undeclared-identifiers@1.1.3
├─ underscore@1.9.1
├─ union-value@1.0.1
├─ unpipe@1.0.0
├─ unset-value@1.0.0
├─ upath@1.2.0
├─ upper-case@1.1.3
├─ uri-js@4.2.2
├─ urix@0.1.0
├─ url-parse-lax@1.0.0
├─ url@0.11.0
├─ use@3.1.1
├─ util@0.10.4
├─ utils-merge@1.0.1
├─ uuid@3.3.3
├─ validate-npm-package-license@3.0.4
├─ verror@1.10.0
├─ vm-browserify@1.1.0
├─ void-elements@2.0.1
├─ watchify@3.11.1
├─ which-module@1.0.0
├─ which@1.3.1
├─ wide-align@1.1.3
├─ window-size@0.1.0
├─ with@5.1.1
├─ wordwrap@0.0.2
├─ wrap-ansi@2.1.0
├─ write-file-stdout@0.0.2
├─ y18n@3.2.1
├─ yargs-parser@5.0.0
└─ yauzl@2.10.0
Done in 51.06s.
#+end_example

*** Use Harp
   #+cindex: Harp, using
   #+cindex: Harp, web server
   #+cindex: web server, Harp
   #+cindex: preprocessors, Harp
   #+cindex: Harp, preprocessors
   #+cindex: dynamic resources, Harp
   #+cindex: Harp, dynamic resources
   Harp has a few different features, but its simplest use is to enable a web
   server in a directory of files.  Instead of just serving up files as they
   are, Harp supports different preprocessors that enable you to build dynamic
   resources.  You can mix and match any of these preprocessors in any way, or
   none.  Harp won't care.

   {{{subheading(To Write HTML)}}}
   #+cindex: Harp, HTML
   #+cindex: HTML, Harp
   #+cindex: Markdown
   #+cindex: Jade
   #+cindex: Embedded JavaScript
   #+cindex: EJS
   You can use Markdown, Jade, or Embedded JavaScript (EJS).  By simply using
   the proper extension (~.md~, ~.jade~, or ~.ejs~), Harp will automatically
   convert the syntax for each particular preprocessor into HTML.  You can use
   regular HTML files also.

   {{{subheading(To Write CSS)}}}
   #+cindex: CSS, Harp
   #+cindex: Harp, CSS
   #+cindex: Harp, Less
   #+cindex: Less, Harp
   #+cindex: Harp, Sass
   #+cindex: Sass, Harp
   #+cindex: Stylus, Harp
   #+cindex: Harp, Stylus
   You can use Less (~.less~), Sass (~.scss~), or Stylus (~.styl~), as well as
   regular CSS files.

   {{{subheading(To Write JavaScript)}}}
   #+cindex: Harp, JavaScript
   #+cindex: JavaScript, Harp
   #+cindex: Harp, CoffeeScript
   #+cindex: CoffeeScript, Harp
   The only option you have is CoffeeScript.  Any file with a ~.coffee~
   extension will be converted from CoffeeScript into JavaScript.

** Your First Harp Project

#+cindex:seed application, Harp
#+cindex:Harp CLI
The Harp CLI supports creating an initial ``seed'' application, but it may
be easier to start more simply.

- Create an empty folder---it doesn't matter what it is called---and add a file
  called {{{file(index.md)}}}.[fn::I will call the root folder ~Harp/~]

- For the first test, use Markdown; this is completely arbitrary. See
  [[ex:Example1][Example 1]] for contents of ~index.md~.

#+caption: Contents of ~index.md~ file
#+name: ex:Example1
#+header: :mkdirp yes
#+begin_src markdown -n :tangle Harp/index.md
Hello World
===

This is a page.  Woot.
#+end_src

{{{heading(Running Harp on ~index.md~)}}}

At the command line, ensure that you are in the directory that contains the
file, and run {{{command(harp server)}}}.  You should see Harp start up and
describe where it is running.

#+begin_example
------------
Harp v0.29.0 – Chloi Inc. 2012–2015
Your server is listening at http://localhost:9000/
Press Ctl+C to stop the server
------------
#+end_example

Now open your browser to the address and port shown in your command prompt,
and you will see the web page rendered via Harp.  Notice how the Markdown
was automatically converted into HTML.

#+caption:Running the Harp Server
#+name:com:Harp-Server
#+begin_src sh :dir Harp :results output :exports both
yarn harp server&
#+end_src

#+RESULTS: com:Harp-Server

#+cindex: URL, proper linking
#+cindex: preprocessor, Harp, linking
Harp makes your file available as an HTML file in the URL as well.  If you
try to access {{{file(index.html)}}}, Harp will recognize that
{{{file(index.md)}}} represents this URL and will serve that file up.  No
matter what preprocessor you use, when you actually /link/ to pages or
resources, you'll always use the ``proper'' type for what the preprocessor
supports.  For example, if you want to add a CSS file and you are using
Less, you don't link to ~styles.less~, but rather to ~styles.css~ instead.

{{{subheading(Learning More About Markdown)}}}

#+cindex:Markdown guide
To learn more about Markdown, see the reference guide:
- [[http://daringfireball.net/projects/markdown][Markdown Reference Guide]]


{{{heading(Using Jade with Harp)}}}

#+cindex:Jade template syntax
Make another file, ~test.jade~, using the Jade template syntax.

#+caption:A Jade File in Harp
#+name:harp-test.jade
#+begin_src js :tangle Harp/test.jade
h1 This is Jade

a(href="index.html") Go Home
#+end_src

This example has used Jade to create a header and a link back to the home
page.  It is linking to ~index.html~ (do /not/ link to ~index.md~ because the
final site, when static, will not include that extension).

{{{subheading(Learning More About Jade)}}}

#+cindex:Jade
Learn more about Jade at its home page:
- [[http://jade-lang.com][Jade Home]]


{{{heading(Using EJS with Harp)}}}

#+cindex:EJS with Harp
Make another file to demonstrate EJS support.  EJS is an older templating
language and resembles PHP or Classic ASP.  Unlike Jade and Markdown, which
work from almost an abstraction layer over HTML, EJS requires you to write your
HTML in --- TML.  You only use EJS's template language when outputting
something dynamic.

#+caption:EJS with Harp
#+name:harp-anothertest.ejs
#+begin_src html :tangle Harp/anothertest.ejs
<h1>This is EJS</h1>

The time is: <%= new Date() %>
#+end_src

The dynamic aspect bgins with ~<%=~ and ends with ~>~.  The inner portion is
pure JavaScript and will be executed when the template is rendered.  You would
open this in your browser by going to ~anothertest.html~.

{{{subheading(Learning More About EJS)}}}

#+cindex:EJS home
Learn more about EJS at its home page:
- [[http://www.embeddedjs.com][EJS Home]]

** Working With Layouts and Partials

** Working With Data

** Generating a Site

** Building Camden Grounds

** Going Further With Harp

* Building a Blog

** Blogging With Jekyll

** Your First Jekyll Project

** Writing a Post

** A Quick Introduction to Liquid

** Working With Layouts and Includes

** Adding Additional Files

** Working With Data

** Configuring Your Jekyll Site

** Generating a Site

** Building a Blog

** Going Further with Jekyll

* Building a Documentation Site

** Characteristics of a Documentation Site

** Choosing a Generator for Your Documentation Site

** Our Sample Documentation Site

** Creating the Site

*** Installing Hugo

*** Generating the Initial Site Files

*** Configuring the Hugo Site

*** Adding Content

*** Creating the Layout

** Going Further

* Adding Dynamic Elements

** Handling Forms

*** Wufoo Forms

*** Google Docs Forms

*** Formspree

*** Adding a Comment Form to Camden Grounds

** Adding Comments

*** Working with Disqus

*** Adding Comments to The Cat Blog

** Adding Search

*** Creating a Custom Search Engine

*** Adding a Custom Search Engine to a Real Site

** Even More Options

* Adding a CMS

** CloudCannon

*** Creating a Site on CloudCannon

*** Editing a Site on CloudCannon

*** Where to Go from Here

** Netlify CMS

*** Setting Up the Netlify CMS

*** Where to Go from Here

** Jekyll Admin

*** Setting Up Jekyll Admin

*** Editing a Site in Jekyll Admin

*** Where to Go from Here

** More Options

*** Forestry.io

*** Lektor

*** Headless CMS

* Deployment

** Plain Old Web Servers

** Cloud File Storage Providers

*** Hosting a Site on Amazon S3

*** Hosting a Site on Google Cloud Storage

** Deploying with Surge

** Deploying with Netlify

** Summary

* Mirgrating to a Static Site

** Migrating from WordPress to Jekyll

** Other Migration Options

*** Hugo

*** Middleman

*** Hexo

*** Harp

*** Many More Options Are Available

** Go Forth and Be Static

* Copying
  :PROPERTIES:
  :Copying:  t
  :END:
  Based upon /{{{title}}}/ by {{{author}}} & {{{subauthor}}} (O'Reilly).
  \copy 2017 {{{author}}}, 978-1-491-96094-3.

  This document was:

  Produced: {{{time(%F %R)}}}
  Version: {{{VERSION}}}
  Edition: {{{EDITION}}}
* Listing
  :PROPERTIES:
  :Unnumbered: t
  :END:
  #+TEXINFO: @listoffloats Listing
* Index
  :PROPERTIES:
  :Index:    cp
  :END:
* Export Settings                                                  :noexport:
#+TEXINFO_PRINTED_TITLE: Outline of @i{Working With Static Sites}
#+TEXINFO_CLASS: info
#+TEXINFO_DIR_CATEGORY:WebDev
#+TEXINFO_DIR_TITLE:working-with-static-sites
#+TEXINFO_DIR_DESC:Outline of Working With Static Sites by R Campden & B Rinaldo
#+MACRO: subauthor Brian Rinaldo
#+MACRO: command @@texinfo:@command{*@@$1@@texinfo:*}@@
#+MACRO: file @@texinfo:@file{@@$1@@texinfo:}@@
#+MACRO: samp @@texinfo:@samp{@@<$1>@@texinfo:}@@
#+MACRO: heading @@texinfo:@heading @@$1
#+MACRO: subheading @@texinfo:@subheading @@$1
#+MACRO: noindent @@texinfo:@noindent @@
